Delete this pointless sentence.

Delete THIS pointless sentence. Don't delete me!

Change THIS pointless sentence. Don't delete me!




Alright, I'm gonna show you how to get started in Vim from ABSOLUTE 0, having never used it before. What I want to do is give you a series of little demos, obstacle courses, but first, I'm gonna take 30 seconds to just run through the basics if you literally have 0 idea what you're doing. So, when you open up vim, you'll notice you can't type anything. Vim has different modes of editing, and right now you're in normal mode. To insert text, press i. Now we can type things, hit enter, and type more things. We can also use backspace. To get out of insert and back to normal mode, press escape. NO MATTER WHAT MODE YOU'RE IN, ESCAPE WILL BRING YOU BACK TO NORMAL. Okay and also, you use H J K L to move your cursor around.

Alright, let's get started. Our goal for today is to delete this sentence. Vim is about speed, so we want to find the absolute fastest way to delete this sentence. Also, don't follow along just yet. Just watch. So, how would you do it? Easy. Just highlight the sentence and hit backspace. Well that didn't work. But at this point, we know we can use L to move forward, and once we're in insert mode, we can use backspace. Perfect. Go to the end of sentence, hit i, and backspace to the beginning. Wait, how do we get around that period? We can press a to append instead of insert. Wonderful.
But hold on. What did we do wrong? Insert mode is for inserting text, not editing. There was an unnecessary step in there. How can we backspace stuff without leaving normal mode? PRESS X! We could go to the end of the sentence and do this, but X actually doesn't backspace. It deletes the letter under the cursor. So instead, we can just press X a bunch of times. Great, we're getting faster. 
But we're being repetetive, which you should never do in vim. Before any command, we can actually give it a number and tell it how many times we want to do it. So instead of speed clicking x, we can type 10x, 20x, and so on. Great! That saved us some time.
But hold on, just like how insert mode is for inserting, not editing, x is for deleting single letters, not words, let alone sentences! So we're still doing it wrong. Well, vim has a command called delete. Now delete is different from x because we have to actually tell it what we want to delete. A letter? Press dl, and it will do the same thing as x. That's dumb. But we can delete words! Let's do that. Delete, delete, delete, delete.
Oh wait, let's give it a number! Let's see, there are four words here so i will just say delete four words! WOW! We're getting close.
But wait a minute. I know our goal was to delete this sentence, but this sentence happens to be the only thing on the line. So...can't we just delete the line? Press dd.
Okay, we just completed our task in only two keystrokes. Can it possibly get better than that? Yes. We can do it in one. Press D. Hold on, notice how it didn't shift the lines up. That's because D doesn't do the same thing as dd. dd deletes the entire line, and D deletes TO the end of the line. So D is the fastest, but it only works in this case because our cursor is at the beginning of the line. Otherwise, we would want to use dd.
Okay everyone, there's a problem. We haven't been following instructions. Our instructions were to delete the sentence. We cheated by deleting the whole line. What if we add another sentence after it? Well, we literally have to start all over. The logical next step is to learn how to select text. Enter visual mode with v, and use L to go to the period. Actually, just use 4w. Looks good to me.
And there you have it. What I just showed you is intermediate vim. Many people will spend years in vim and not get past this level. But there is a better way. There is a way to delete this whole sentence, instead of deleting just four words. Sentences always end with punctuation, so why not just find a way to delete to the period? That way, it won't matter how many words are in our sentence. No need to count.
This time, I'm gonna just show you the answer first and explain after. Press dt. Oh wait, we want to delete the period too? Press df. F is for find. But now we have this unwanted space. So now, our final answer. In this scenario, the fastest way to delete a sentence of unknown length id dtD.
So what's up with find and to? You can use these features any time to move around a line, and that's probably what they're most useful for. Find a letter, and instead of repeating ft ft ft if there are multiple ts in the line, we can just use semicolon to traverse forward, and comma to traverse back. Want to find something behind you? Use capital F, and then semicolon will continue your backward traversal, and comma will traverse toward the end of the line.
Using T in vim works EXACTLY the same as f, except it brings you before the letter instead of over it. In normal mode, for traversing lines, there's no reason to use one of these over the other. The difference in one letter will not make a big difference to your workflow. So then, what's the point of T?
And that brings us to my next favorite thing: Change! Change works EXACTLY like delete, except it will put us in insert mode. Remember how delete would remove the space after the word? Change won't, because if you're changing a word, why would you want to get rid of the space? Just like how if you're deleting a word, why the hell would you want to keep the space? So here, if we wanted to delete the sentence we would say dtD, but if we want to change the sentence, we should keep the period and space so I'll just say ct. When using change, it's much more important that we get our motion right. If we delete slightly less text than desired, we can always press x to clear out another character or two. But with change, we're in insert mode, so it would be really annoying to go back and get rid of extra characters. And THIS is why having BOTH find and to is very useful in vim.

Okay one last thing. Let's say I want to delete/change to/find something in front or behind me, but it's on another line?Welp, find and to don't work anymore. So we will use search instead. Search is useful for searching for things in your document. You can press slash to search for a word, and then n and N to traverse forward and backward. To search backward, just like how you hit shift f and shift t, you're now gonna hit shift slash, which is question mark. The same rules for n and N apply, but it's just reversed now. Okay, back to our task. How do we delete/change to/find something on another line? Use the same method as before, but replace f and t with slash, and F and T with question mark. It's only a little bit different now because we don't have the luxury of choosing between f and t, and then also, we need to hit enter to execute the search, so there's an extra keypress. But overall not too bad. Very similar.

